rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /campaigns/{campaignId} {
      allow read:
        if resource.data.campaignStatus == 'Active'
        || isOwner(resource.data.contractorId);

      allow create:
        if isAuthenticated()
        && request.resource.data.contractorId == request.auth.uid
        && request.resource.data.campaignStatus in ['Active', 'Inactive']
        && request.resource.data.campaignName is string
        && request.resource.data.showcaseAddress is string
        && request.resource.data.jobStatus in ['Completed', 'Pending']
        && request.resource.data.pageSlug is string;

      allow update:
        if isOwner(resource.data.contractorId)
        && request.resource.data.contractorId == resource.data.contractorId;

      allow delete:
        if isOwner(resource.data.contractorId);
    }

    match /photos/{photoId} {
      allow read: if true;

      allow create, update, delete:
        if isAuthenticated()
        && firestore.get(
          /databases/$(database)/documents/campaigns/$(request.resource.data.campaignId)
        ).data.contractorId == request.auth.uid;
    }

    match /leads/{leadId} {
      allow create: if true;

      allow read, update, delete:
        if isAuthenticated()
        && firestore.get(
          /databases/$(database)/documents/campaigns/$(resource.data.campaignId)
        ).data.contractorId == request.auth.uid;
    }

    match /contractors/{contractorId} {
      allow read, write: if isOwner(contractorId);
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
